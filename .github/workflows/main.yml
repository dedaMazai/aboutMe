# name: linting, testing, building
# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]
# jobs:
#   pipeline:
#     runs-on: windows-2019
#     strategy:
#       matrix:
#         node-version: [ 16.x ]

#     steps:
#       - uses: actions/checkout@v2
#       - name: Staring Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v1
#         with:
#           node-version: ${{ matrix.node-version }}
#       - name: install modules
#         run: npm install
#       - name: build production project
#         run: npm run build:prod
#         if: always()
#       - name: linting typescript
#         run: npm run lint:ts
#         if: always()
      # - name: linting css
      #   run: npm run lint:scss
      #   if: always()
      # - name: unit testing
      #   run: npm run test:unit
      #   if: always()
      # - name: build storybook
      #   run: npm run storybook:build
      #   if: always()
      # - name: screenshot testing
      #   run: npm run test:ui:ci
      #   if: always()

name: linting, testing, building
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
permissions:
  contents: write
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: true
jobs:
  build-and-ui-testing:
    runs-on: windows-2019
    concurrency: ci-${{ github.ref }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    strategy:
      matrix:
        node-version: [ 16.x ]
    steps:
      - uses: actions/checkout@v2
      - name: Staring Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: install modules
        run: npm ci --force
      - name: build production project
        run: npm run build:prod
        if: always()
      - name: build storybook
        run: npm run storybook:build
        if: always()
      - name: screenshot testing
        run: npm run test:ui:ci
        if: always()
      - name: unit testing
        if: always()
        run: npm run test:unit
      - name: Generate HTML report
        run: npm run test:ui:report
        if: always()
      - name: move loki
        run: mv .loki reports/
        if: always()
      - name: Setup Pages
        uses: actions/configure-pages@v2
        if: always()
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        if: always()
        with:
          path: 'reports'
      - name: Deploy to GitHub Pages
        id: deployment
        if: always()
        uses: actions/deploy-pages@v1

  checks:
    runs-on: windows-2019
    strategy:
      matrix:
        node-version: [ 16.x ]
    steps:
      - uses: actions/checkout@v2
      - name: Staring Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: install modules
        run: npm ci --force
      - name: linting typescript
        run: npm run lint:ts
        if: always()
      - name: linting css
        run: npm run lint:scss

# stages:
#   - test
#   - build
#   - deploy

# code_quality:
#   image: node:14.17.4
#   stage: test
#   before_script:
#     - npm ci
#   script:
#     - npm run eslint
#     - npm run stylelint
#     - npm run prettier-check
#   only:
#     - merge_requests

# build:
#   image: node:14.17.4
#   stage: build
#   before_script:
#     - npm ci
#   script:
#     - npm run build
#   artifacts:
#     paths:
#       - dist
#   only:
#     - merge_requests
#     - master

# deploy:
#   image: alpine:latest
#   stage: deploy
#   before_script:
#     # устанавливаем команду rsync
#     - apk update && apk add rsync openssh
#     - mkdir ~/.ssh
#     - chmod 600 ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#     - chmod 600 ~/.ssh/known_hosts
#   environment:
#     name: production
#   resource_group: production
#   script:
#     # синхронизируем папку dist с удаленной папкой
#     # флаг delete нужен для того, чтобы у нас в удаленной папке всегда находилось то, что лежит в папке dist конкретного деплоя
#     - rsync -a --delete dist/ ваш_сервер:/home/пользователь/проект
#   only:
#     - master
